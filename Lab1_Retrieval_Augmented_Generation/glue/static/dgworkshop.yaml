Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Join 
        - '-'
        - - 'dg-workshop'
          - !Ref AWS::AccountId     

  S3Copy2:
    Type: 'Custom::CopyToS3'
    Properties:
      ServiceToken: !GetAtt 
        - CopyClaimsToS3
        - Arn
      S3BucketName2: !Ref S3Bucket
      Urls2:
        - >-
          https://aws-bigdata-blog.s3.amazonaws.com/artifacts/gluenewcrawlerui2/source2/claimsnew/claims_data.csv
  CopyClaimsToS3:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: !Join 
          - |+

          - - ''
            - import os
            - import urllib.request
            - from urllib.parse import urlparse
            - import json
            - import boto3
            - import cfnresponse
            - ''
            - print('Loading function')
            - ''
            - s3 = boto3.resource('s3')
            - ''
            - ''
            - 'def save_to_local(url):'
            - '    urlPath = urlparse(url).path'
            - '    fileName = os.path.basename(urlPath)'
            - '    filePath = ''/tmp/'' + fileName'
            - '    urllib.request.urlretrieve(url, filePath)'
            - '    return filePath'
            - ''
            - ''
            - 'def upload_to_s3(filePath, bucket):'
            - '    fileName = os.path.basename(filePath)'
            - '    s3.Object(bucket, ''claims/''+fileName).put(Body=open(filePath, ''rb''))'
            - ''
            - ''
            - 'def copy_to_s3(url, bucket):'
            - '    filePath = save_to_local(url)'
            - '    upload_to_s3(filePath, bucket)'
            - ''
            - ''
            - 'def lambda_handler(event, context):'
            - '    print(''Received event: '' + json.dumps(event, indent=2))'
            - ''
            - '    if event[''RequestType''] == ''Create'':'
            - '        # get the properties set in the CloudFormation resource'
            - '        properties = event[''ResourceProperties'']'
            - '        urls = properties[''Urls2'']'
            - '        bucket = properties[''S3BucketName2'']'
            - ''
            - '        try:'
            - '            for url in urls:'
            - '                copy_to_s3(url, bucket)'
            - ''
            - '        except Exception as e:'
            - '            print(e)'
            - '            cfnresponse.send(event, context, cfnresponse.FAILED, {'
            - '                             ''Response'': ''Failure''})'
            - '            return'
            - ''
            - '    cfnresponse.send(event, context, cfnresponse.SUCCESS,'
            - '                     {''Response'': ''Success''})'
      Runtime: python3.9
      Timeout: 60
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: '*'


  CFNGlueRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: GlueWorkshopRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: AccessPolicies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref S3Bucket
                    - /*
        - PolicyName: GW-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'  
        - PolicyName: GW-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
  
  #### LF Roles and Users
  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: LF-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
        - PolicyName: Glue-Demo-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
        - PolicyName: LF-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'
        - PolicyName: LF-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LF-GlueServiceRole'
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
      RoleName: LF-GlueServiceRole
  
  DataAnalystGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: DA-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
        - PolicyName: DA-Glue-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
        - PolicyName: DA-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'
        - PolicyName: DA-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/DA-GlueServiceRole'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
      RoleName: DA-GlueServiceRole
  
  WSAthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties: 
      Description: "Workshop Workgroup"
      Name: "Workshop"
      RecursiveDeleteOption: true
      State: "ENABLED"
      WorkGroupConfiguration: 
        EnforceWorkGroupConfiguration: true
        ResultConfiguration: 
          OutputLocation: !Sub s3://${S3Bucket}/
      
  DataAdminUser:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /athena-results/*
        - PolicyName: LF-Athena-Run-Tagging-Query
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:StartQueryPlanning'
                  - 'lakeformation:GetQueryState'
                  - 'lakeformation:GetWorkUnits'
                  - 'lakeformation:GetWorkUnitResults'
                Resource: "*"
        - PolicyName: LF-DataLake-Admin-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:CreateServiceLinkedRole'
                Resource: '*'
                Condition:
                  StringEquals:
                    'iam:AWSServiceName': lakeformation.amazonaws.com
              - Effect: Allow
                Action:
                  - 'iam:PutRolePolicy'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - >-
                      :role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/LF-GlueServiceRole'
                  - 'arn:aws:iam::*:role/GlueWorkshopRole'
        - PolicyName: LF-DataLake-Admin-RAM-Invitation-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ram:AcceptResourceShareInvitation'
                  - 'ram:RejectResourceShareInvitation'
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ram:EnableSharingWithAwsOrganization'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager'
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
      RoleName: data-owner
  
  DataAnalystUser:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /athena-results/*
        - PolicyName: LF-Athena-Run-Tagging-Query
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:StartQueryPlanning'
                  - 'lakeformation:GetQueryState'
                  - 'lakeformation:GetWorkUnits'
                  - 'lakeformation:GetWorkUnitResults'
                Resource: "*"
        - PolicyName: LF-PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/DA-GlueServiceRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2FullAccess'
      RoleName: data-analyst
      
  ###LF Settings
  LFDataLakeSettings:
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !GetAtt 'DataAdminUser.Arn'
        - DataLakePrincipalIdentifier: !GetAtt 'CFNGlueRole.Arn'
      CreateDatabaseDefaultPermissions: []
      CreateTableDefaultPermissions: []

  LFDataLakeLocation:
    Type: AWS::LakeFormation::Resource
    Properties:
      ResourceArn: !Sub arn:aws:s3:::${S3Bucket}
      RoleArn: !GetAtt 'CFNGlueRole.Arn'
      UseServiceLinkedRole: false

  LFTbacDatabasePermissionForDataAdminUser:
    Type: AWS::LakeFormation::PrincipalPermissions
    Properties:
      Principal:
        DataLakePrincipalIdentifier: !GetAtt 'DataAdminUser.Arn'
      Resource:
        Table:
          CatalogId: !Ref AWS::AccountId
          DatabaseName: !Ref CFNDatabaseWS
          TableWildcard: { }
      Permissions:
        - "SELECT"
      PermissionsWithGrantOption:
        - "SELECT"

  LFTbacDatabasePermissionForDataAnalystUser:
    Type: AWS::LakeFormation::PrincipalPermissions
    Properties:
      Principal:
        DataLakePrincipalIdentifier: !GetAtt 'DataAnalystUser.Arn'
      Resource:
        TableWithColumns:
          CatalogId: !Ref AWS::AccountId
          DatabaseName: !Ref CFNDatabaseWS
          Name: !Ref CFNTableClaimsPass
          ColumnNames:
            - "month"
            - "weekofmonth"
            - "dayofweek"
            - "make"
            - "accidentarea"
            - "dayofweekclaimed"
            - "monthclaimed"
            - "weekofmonthclaimed"
            - "vehiclecategory"
            - "fraudfound"
            - "deductible"
      Permissions:
        - "SELECT"
      PermissionsWithGrantOption:
        - "SELECT"
  
  LFTablePassPermissionForGlueWorkshopRole:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt 'CFNGlueRole.Arn'
      Permissions:
        - ALL
      PermissionsWithGrantOption:
        - ALL
      Resource:
        TableResource:
          DatabaseName: !Ref CFNDatabaseWS
          Name: !Ref CFNTableClaimsPass
          
  LFTableFailPermissionForGlueWorkshopRole:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt 'CFNGlueRole.Arn'
      Permissions:
        - ALL
      PermissionsWithGrantOption:
        - ALL
      Resource:
        TableResource:
          DatabaseName: !Ref CFNDatabaseWS
          Name: !Ref CFNTableClaimsFail
          
          
  LFTableOriPermissionForGlueWorkshopRole:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt 'CFNGlueRole.Arn'
      Permissions:
        - ALL
      PermissionsWithGrantOption:
        - ALL
      Resource:
        TableResource:
          DatabaseName: !Ref CFNDatabaseWS
          Name: !Ref CFNTableClaims
      
  ###
# Create an AWS Glue database
  CFNDatabaseWS:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: insurancedb	
        Description: Database for claims and customers
        CreateTableDefaultPermissions: []
    
###
# Create an AWS Glue table
  CFNTableClaimsPass:
    # Creating the table waits for the database to be created
    DependsOn: CFNDatabaseWS
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CFNDatabaseWS
      TableInput:
        Name: pass
        Description: Claims Data Clean
        TableType: EXTERNAL_TABLE
        Parameters: 
          classification": "JSON"
          field.delim: ","
          skip.header.line.count: 1
          areColumnsQuoted: false
  
#       ViewExpandedText: String
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: month
            Type: string
          - Name: weekofmonth
            Type: bigint
          - Name: dayofweek
            Type: string
          - Name: make
            Type: string
          - Name: accidentarea
            Type: string
          - Name: dayofweekclaimed
            Type: string
          - Name: monthclaimed
            Type: string
          - Name: weekofmonthclaimed
            Type: bigint
          - Name: sex
            Type: string
          - Name: maritalstatus
            Type: string
          - Name: age
            Type: bigint
          - Name: vehiclecategory
            Type: string
          - Name: fraudfound
            Type: bigint
          - Name: policynumber
            Type: bigint
          - Name: repnumber
            Type: bigint
          - Name: deductible
            Type: bigint
          - Name: driverrating
            Type: bigint
          - Name: days_policy_accident
            Type: string
          - Name: days_policy_claim
            Type: string
          - Name: pastnumberofclaims
            Type: string
          - Name: ageofvehicle
            Type: string
          - Name: policereportfiled
            Type: string
          - Name: dataqualityevaluationresult
            Type: string
          - Name: dataqualityrulesskip
            Type: array<string>
          - Name: dataqualityrulesfail
            Type: array<string>
          - Name: dataqualityrulespass
            Type: array<string>
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join
            - ''
            - - 's3://'
              - !Ref S3Bucket
              - '/dqoutputs/pass/' 
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

###
# Create an AWS Glue table
  CFNTableClaimsFail:
    # Creating the table waits for the database to be created
    DependsOn: CFNDatabaseWS
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CFNDatabaseWS
      TableInput:
        Name: fail
        Description: Claims Data Failed
        TableType: EXTERNAL_TABLE
        Parameters: 
          classification": "JSON"
          field.delim: ","
          skip.header.line.count: 1
          areColumnsQuoted: false
  
#       ViewExpandedText: String
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: month
            Type: string
          - Name: weekofmonth
            Type: bigint
          - Name: dayofweek
            Type: string
          - Name: make
            Type: string
          - Name: accidentarea
            Type: string
          - Name: dayofweekclaimed
            Type: string
          - Name: monthclaimed
            Type: string
          - Name: weekofmonthclaimed
            Type: bigint
          - Name: sex
            Type: string
          - Name: maritalstatus
            Type: string
          - Name: age
            Type: bigint
          - Name: vehiclecategory
            Type: string
          - Name: fraudfound
            Type: bigint
          - Name: policynumber
            Type: bigint
          - Name: repnumber
            Type: bigint
          - Name: deductible
            Type: bigint
          - Name: driverrating
            Type: bigint
          - Name: days_policy_accident
            Type: string
          - Name: days_policy_claim
            Type: string
          - Name: pastnumberofclaims
            Type: string
          - Name: ageofvehicle
            Type: string
          - Name: policereportfiled
            Type: string
          - Name: dataqualityevaluationresult
            Type: string
          - Name: dataqualityrulesskip
            Type: array<string>
          - Name: dataqualityrulesfail
            Type: array<string>
          - Name: dataqualityrulespass
            Type: array<string>
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join
            - ''
            - - 's3://'
              - !Ref S3Bucket
              - '/dqoutputs/fail/' 
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
###
# Create an AWS Glue table
  CFNTableClaims:
    # Creating the table waits for the database to be created
    DependsOn: CFNDatabaseWS
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CFNDatabaseWS
      TableInput:
        Name: claims
        Description: Claims Data
        TableType: EXTERNAL_TABLE
        Parameters: 
          classification": "csv"
          field.delim: ","
          skip.header.line.count: 1
          areColumnsQuoted: false
  
#       ViewExpandedText: String
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: month
            Type: string
          - Name: weekofmonth
            Type: bigint
          - Name: dayofweek
            Type: string
          - Name: make
            Type: string
          - Name: accidentarea
            Type: string
          - Name: dayofweekclaimed
            Type: string
          - Name: monthclaimed
            Type: string
          - Name: weekofmonthclaimed
            Type: bigint
          - Name: sex
            Type: string
          - Name: maritalstatus
            Type: string
          - Name: age
            Type: bigint
          - Name: vehiclecategory
            Type: string
          - Name: fraudfound
            Type: bigint
          - Name: policynumber
            Type: bigint
          - Name: repnumber
            Type: bigint
          - Name: deductible
            Type: bigint
          - Name: driverrating
            Type: bigint
          - Name: days_policy_accident
            Type: string
          - Name: days_policy_claim
            Type: string
          - Name: pastnumberofclaims
            Type: string
          - Name: ageofvehicle
            Type: string
          - Name: policereportfiled
            Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join
            - ''
            - - 's3://'
              - !Ref S3Bucket
              - '/claims/' 
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
####S3 FOLDERS
  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt AWSLambdaFunction.Arn
      the_bucket: !Ref S3Bucket
      dirs_to_create: ["metricout","athena-results"]
  AWSLambdaFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       Description: "Work with S3 Buckets!"
       FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-lambda'
       Handler: index.handler
       Role: !GetAtt AWSLambdaExecutionRole.Arn
       Timeout: 360
       Runtime: python3.9
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              # Init ...
              the_event = event['RequestType']
              print("The event is: ", str(the_event))
              response_data = {}
              s_3 = boto3.client('s3')
              # Retrieve parameters
              the_bucket = event['ResourceProperties']['the_bucket']
              dirs_to_create = event['ResourceProperties']['dirs_to_create']
              try:
                  if the_event in ('Create', 'Update'):
                      print("Requested folders: ", str(dirs_to_create))
                      for dir_name in dirs_to_create:
                          print("Creating: ", str(dir_name))
                          s_3.put_object(Bucket=the_bucket,
                                         Key=(dir_name
                                              + '/'))
                  elif the_event == 'Delete':
                      print("Deleting S3 content...")
                      b_operator = boto3.resource('s3')
                      b_operator.Bucket(str(the_bucket)).objects.all().delete()
                  # Everything OK... send the signal back
                  print("Operation successful!")
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.SUCCESS,
                                   response_data)
              except Exception as e:
                  print("Operation failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.FAILED,
                                   response_data)
  AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:List*
             Effect: Allow
             Resource:
             - !Sub arn:aws:s3:::${S3Bucket}/*
             - !Sub arn:aws:s3:::${S3Bucket}
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
       RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole


Outputs:
  GlueWorkshopRole:
    Description: Glue blog IAM Role
    Value: !Ref CFNGlueRole
  BuckectName:
    Description: S3 Bucket
    Value: !Ref S3Bucket
  GlueDatabase:
    Description: Glue Database
    Value: !Ref CFNDatabaseWS
  GlueTable:
    Description: Glue Table
    Value: !Ref CFNTableClaims
      